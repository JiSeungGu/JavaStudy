/*
 * 
 *  20200622->제어문
 *  => 종류
 *  	1. 조건문
 *  		= 단일 조건문
 *  			if(조건문){
 *  				실행문장 ==>  ( 조건문이 True 일 경우 실행하는 문장)
 *  					  ==> 조건이 false 가 되면 실행문장을 수행하지 않는다.
 *  			}
 *  			*** 모든 제어문은 {}을 사용하지 않으면 1개의 문장만 실행한다
 *  
 *  			예) ============
 *  				if(조건문)
 *  					실행문장 1  <- if함수 실행시에 돌아가는 문장
 *  			   ============
 *  					실행문장 2
 *  
 *  
 *  			예) =============
 *  				if(조건문){
 *  					실행문장 1 < - if가 제어하는 문장
 *  					실행문장 2 
 *  			   =============
 *  		= 선택 조건문
 *  			true일 경우 ==> 처리 문장  
 *  			false일경우==> 처리 문장
 *  			
 *  			예) 로그인 처리가 될 경우
 *  				로그인 처리가 안된 경우
 *  			형식) ======> 사용빈도가 많다
 *  				if(조건문)
 *  					조건이 true경우에 처리 문장
 *  				else
 *  					조건이 false일 경우에 처리 문장    
 *  		= 다중 조건문: 조건에 해당하는 문장만 수행 => 한번만 수행
 *  			형식)
 *  				if(조건문) 
 *  					실행 문장1   => 조건이  true일 때 수행하고 종료 
 *  				else if(조건문)
 *  					실행 문장2	  => 조건이  true일 때 수행하고 종료
 *  				else if(조건문)
 *  					실행 문장3   => 조건이  true일 때 수행하고 종료
 *    				else if(조건문)
 *  					실행 문장4   => 조건이  true일 때 수행하고 종료
 *     				else
 *  					실행 문장%   => 조건에 해당하는 사항이 없는 경우  
 *  
 *  			==>if(조건문)
 *  				실행문장
 *  			==>if(조건문)
 *  				실행문장
 *  	===================================		
 *  	2. 선택문
 *  	3. 반복문
 *  	4. 반복제어
 *  => 형식
 *  => 흐름 이해
 *  => 구현
 */
public class 자바단일조건문 {

	public static void main(String[] args) {
		int score = 60;
		// score가 60이상이면 성공
		// 60이하이면 실패
		if( score >= 60) {
			System.out.println("첫번째 if문");
			System.out.println("Success");
		}
		if( score <60) {
			System.out.println("두번째 if문");
			System.out.println("Fail");
		}
			//무조건 수행하는 문장
		
		
		
	}
}
